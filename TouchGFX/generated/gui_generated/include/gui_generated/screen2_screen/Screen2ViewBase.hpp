/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN2VIEWBASE_HPP
#define SCREEN2VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/Slider.hpp>

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void keyboardSeletedVar(uint8_t value);

    /*
     * Virtual Action Handlers
     */
    virtual void keyBoardSelected(uint8_t value)
    {
        // Override and implement this function in Screen2
    }

    virtual void filter_value(int value)
    {
        // Override and implement this function in Screen2
    }

    virtual void reverseButton()
    {
        // Override and implement this function in Screen2
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::CircleProgress posiProgress;
    touchgfx::PainterRGB565Bitmap posiProgressPainter;
    touchgfx::TextAreaWithOneWildcard posi;
    touchgfx::ToggleButton toggleButton1;
    touchgfx::Button button1;
    touchgfx::Button gid_button;
    touchgfx::Button sid_button;
    touchgfx::TextAreaWithTwoWildcards id;
    touchgfx::TextArea reverse_textArea;
    touchgfx::Button map_4095_button;
    touchgfx::Button map_0_button;
    touchgfx::Button limitMax_button;
    touchgfx::Button limitMin_button;
    touchgfx::TextArea limitMin_textArea;
    touchgfx::TextArea limitMax_textArea;
    touchgfx::TextArea map_0_textArea;
    touchgfx::TextArea map_4095_textArea;
    touchgfx::TextArea Filter_textArea;
    touchgfx::Slider slider1;
    touchgfx::TextAreaWithOneWildcard limitMinVar_textArea;
    touchgfx::TextAreaWithOneWildcard limitMaxVar_textArea;
    touchgfx::TextAreaWithOneWildcard map_0Var_textArea;
    touchgfx::TextAreaWithOneWildcard map_4095Var_textArea;
    touchgfx::TextAreaWithOneWildcard FilterVar_textArea;

    /*
     * Wildcard Buffers
     */
    static const uint16_t POSI_SIZE = 10;
    touchgfx::Unicode::UnicodeChar posiBuffer[POSI_SIZE];
    static const uint16_t IDBUFFER1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar idBuffer1[IDBUFFER1_SIZE];
    static const uint16_t IDBUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar idBuffer2[IDBUFFER2_SIZE];
    static const uint16_t LIMITMINVAR_TEXTAREA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar limitMinVar_textAreaBuffer[LIMITMINVAR_TEXTAREA_SIZE];
    static const uint16_t LIMITMAXVAR_TEXTAREA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar limitMaxVar_textAreaBuffer[LIMITMAXVAR_TEXTAREA_SIZE];
    static const uint16_t MAP_0VAR_TEXTAREA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar map_0Var_textAreaBuffer[MAP_0VAR_TEXTAREA_SIZE];
    static const uint16_t MAP_4095VAR_TEXTAREA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar map_4095Var_textAreaBuffer[MAP_4095VAR_TEXTAREA_SIZE];
    static const uint16_t FILTERVAR_TEXTAREA_SIZE = 10;
    touchgfx::Unicode::UnicodeChar FilterVar_textAreaBuffer[FILTERVAR_TEXTAREA_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen2ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen2ViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // SCREEN2VIEWBASE_HPP
