/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen2ViewBase::Screen2ViewBase() :
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &Screen2ViewBase::sliderValueChangedCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 480, 272);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    posiProgress.setXY(9, 64);
    posiProgress.setProgressIndicatorPosition(0, 0, 184, 94);
    posiProgress.setRange(0, 4095);
    posiProgress.setCenter(92, 94);
    posiProgress.setRadius(92);
    posiProgress.setLineWidth(0);
    posiProgress.setStartEndAngle(-90, 90);
    posiProgress.setBackground(touchgfx::Bitmap(BITMAP_DARK_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_HALF_ID));
    posiProgressPainter.setBitmap(touchgfx::Bitmap(BITMAP_DARK_PROGRESSINDICATORS_FILL_LARGE_CIRCLE_INDICATOR_FILL_LINE_HALF_ID));
    posiProgress.setPainter(posiProgressPainter);
    posiProgress.setValue(2048);

    posi.setPosition(9, 134, 184, 49);
    posi.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    posi.setLinespacing(0);
    Unicode::snprintf(posiBuffer, POSI_SIZE, "%s", touchgfx::TypedText(T_NUM_LARGE).getText());
    posi.setWildcard(posiBuffer);
    posi.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L0HY));

    toggleButton1.setXY(331, 8);
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
    toggleButton1.setAction(buttonCallback);

    button1.setXY(9, 8);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_HOME_48_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_HOME_48_ID));
    button1.setAction(buttonCallback);

    gid_button.setXY(34, 175);
    gid_button.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    gid_button.setAction(buttonCallback);

    sid_button.setXY(106, 175);
    sid_button.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    sid_button.setAction(buttonCallback);

    id.setPosition(16, 179, 170, 49);
    id.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    id.setLinespacing(0);
    touchgfx::Unicode::snprintf(idBuffer1, IDBUFFER1_SIZE, "%s", touchgfx::TypedText(T_NUM_LARGE).getText());
    id.setWildcard1(idBuffer1);
    touchgfx::Unicode::snprintf(idBuffer2, IDBUFFER2_SIZE, "%s", touchgfx::TypedText(T_NUM_LARGE).getText());
    id.setWildcard2(idBuffer2);
    id.setTypedText(touchgfx::TypedText(T___SINGLEUSE_009U));

    reverse_textArea.setXY(226, 15);
    reverse_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    reverse_textArea.setLinespacing(0);
    reverse_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7GSF));

    map_4095_button.setXY(372, 155);
    map_4095_button.setBitmaps(touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_ID), touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_PRESSED_ID));
    map_4095_button.setAction(buttonCallback);
    map_4095_button.setAlpha(100);

    map_0_button.setXY(372, 121);
    map_0_button.setBitmaps(touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_ID), touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_PRESSED_ID));
    map_0_button.setAction(buttonCallback);
    map_0_button.setAlpha(100);

    limitMax_button.setXY(372, 87);
    limitMax_button.setBitmaps(touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_ID), touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_PRESSED_ID));
    limitMax_button.setAction(buttonCallback);
    limitMax_button.setAlpha(100);

    limitMin_button.setXY(372, 53);
    limitMin_button.setBitmaps(touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_ID), touchgfx::Bitmap(BITMAP_ROUND_EDGE_XSMALL_PRESSED_ID));
    limitMin_button.setAction(buttonCallback);
    limitMin_button.setAlpha(100);

    limitMin_textArea.setXY(226, 55);
    limitMin_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    limitMin_textArea.setLinespacing(0);
    limitMin_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HNW4));

    limitMax_textArea.setXY(226, 90);
    limitMax_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    limitMax_textArea.setLinespacing(0);
    limitMax_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FHL2));

    map_0_textArea.setXY(226, 124);
    map_0_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    map_0_textArea.setLinespacing(0);
    map_0_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PT5J));

    map_4095_textArea.setXY(226, 157);
    map_4095_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    map_4095_textArea.setLinespacing(0);
    map_4095_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P9NB));

    Filter_textArea.setXY(226, 193);
    Filter_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Filter_textArea.setLinespacing(0);
    Filter_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T8KH));

    slider1.setXY(226, 222);
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_BACK_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_KNOB_ID));
    slider1.setupHorizontalSlider(0, 0, 4, 3, 135);
    slider1.setValueRange(1, 14);
    slider1.setValue(1);
    slider1.setNewValueCallback(sliderValueChangedCallback);

    limitMinVar_textArea.setPosition(372, 55, 85, 30);
    limitMinVar_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    limitMinVar_textArea.setLinespacing(0);
    Unicode::snprintf(limitMinVar_textAreaBuffer, LIMITMINVAR_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_NUM_DEFAULT).getText());
    limitMinVar_textArea.setWildcard(limitMinVar_textAreaBuffer);
    limitMinVar_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6POO));

    limitMaxVar_textArea.setPosition(372, 89, 85, 30);
    limitMaxVar_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    limitMaxVar_textArea.setLinespacing(0);
    Unicode::snprintf(limitMaxVar_textAreaBuffer, LIMITMAXVAR_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_NUM_DEFAULT).getText());
    limitMaxVar_textArea.setWildcard(limitMaxVar_textAreaBuffer);
    limitMaxVar_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0M3V));

    map_0Var_textArea.setPosition(372, 123, 85, 30);
    map_0Var_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    map_0Var_textArea.setLinespacing(0);
    Unicode::snprintf(map_0Var_textAreaBuffer, MAP_0VAR_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_NUM_DEFAULT).getText());
    map_0Var_textArea.setWildcard(map_0Var_textAreaBuffer);
    map_0Var_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EKEO));

    map_4095Var_textArea.setPosition(372, 157, 85, 30);
    map_4095Var_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    map_4095Var_textArea.setLinespacing(0);
    Unicode::snprintf(map_4095Var_textAreaBuffer, MAP_4095VAR_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_NUM_DEFAULT).getText());
    map_4095Var_textArea.setWildcard(map_4095Var_textAreaBuffer);
    map_4095Var_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RCKG));

    FilterVar_textArea.setXY(434, 230);
    FilterVar_textArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    FilterVar_textArea.setLinespacing(0);
    Unicode::snprintf(FilterVar_textAreaBuffer, FILTERVAR_TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_NUM_DEFAULT).getText());
    FilterVar_textArea.setWildcard(FilterVar_textAreaBuffer);
    FilterVar_textArea.resizeToCurrentText();
    FilterVar_textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DP9C));

    add(__background);
    add(box1);
    add(posiProgress);
    add(posi);
    add(toggleButton1);
    add(button1);
    add(gid_button);
    add(sid_button);
    add(id);
    add(reverse_textArea);
    add(map_4095_button);
    add(map_0_button);
    add(limitMax_button);
    add(limitMin_button);
    add(limitMin_textArea);
    add(limitMax_textArea);
    add(map_0_textArea);
    add(map_4095_textArea);
    add(Filter_textArea);
    add(slider1);
    add(limitMinVar_textArea);
    add(limitMaxVar_textArea);
    add(map_0Var_textArea);
    add(map_4095Var_textArea);
    add(FilterVar_textArea);
}

void Screen2ViewBase::setupScreen()
{

}

void Screen2ViewBase::keyboardSeletedVar(uint8_t value)
{
    //keyBoardSelected
    //When keyboardSeletedVar is called call virtual function
    //Call keyBoardSelected
    keyBoardSelected(value);
}

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &toggleButton1)
    {
        //reverseButton
        //When toggleButton1 clicked call virtual function
        //Call reverseButton
        reverseButton();
    }
    else if (&src == &button1)
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
    else if (&src == &gid_button)
    {
        //gidButtonPressed
        //When gid_button clicked call keyboardSeletedVar on Screen2
        //Call keyboardSeletedVar
        keyboardSeletedVar(5);

        //gidgotoKeyboard
        //When gidButtonPressed completed change screen to Keyboard
        //Go to Keyboard with no screen transition
        application().gotoKeyboardScreenNoTransition();
    }
    else if (&src == &sid_button)
    {
        //sidButtonPressed
        //When sid_button clicked call keyboardSeletedVar on Screen2
        //Call keyboardSeletedVar
        keyboardSeletedVar(6);

        //sidgotoKeyboard
        //When sidButtonPressed completed change screen to Keyboard
        //Go to Keyboard with no screen transition
        application().gotoKeyboardScreenNoTransition();
    }
    else if (&src == &map_4095_button)
    {
        //map_4095ButtonPressed
        //When map_4095_button clicked call keyboardSeletedVar on Screen2
        //Call keyboardSeletedVar
        keyboardSeletedVar(4);

        //map_4095gotoKeyboard
        //When map_4095ButtonPressed completed change screen to Keyboard
        //Go to Keyboard with no screen transition
        application().gotoKeyboardScreenNoTransition();
    }
    else if (&src == &map_0_button)
    {
        //map_0ButtonPressed
        //When map_0_button clicked call keyboardSeletedVar on Screen2
        //Call keyboardSeletedVar
        keyboardSeletedVar(3);

        //map_0gotoKeyboard
        //When map_0ButtonPressed completed change screen to Keyboard
        //Go to Keyboard with no screen transition
        application().gotoKeyboardScreenNoTransition();
    }
    else if (&src == &limitMax_button)
    {
        //limitMaxButtonPressed
        //When limitMax_button clicked call keyboardSeletedVar on Screen2
        //Call keyboardSeletedVar
        keyboardSeletedVar(2);

        //limitMaxgotoKeyboard
        //When limitMaxButtonPressed completed change screen to Keyboard
        //Go to Keyboard with no screen transition
        application().gotoKeyboardScreenNoTransition();
    }
    else if (&src == &limitMin_button)
    {
        //limitMinButtonPressed
        //When limitMin_button clicked call keyboardSeletedVar on Screen2
        //Call keyboardSeletedVar
        keyboardSeletedVar(1);

        //limitMingotoKeyboard
        //When limitMinButtonPressed completed change screen to Keyboard
        //Go to Keyboard with no screen transition
        application().gotoKeyboardScreenNoTransition();
    }
}

void Screen2ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &slider1)
    {
        //filterValue
        //When slider1 value changed call virtual function
        //Call filter_value
        filter_value(value);
    }
}
